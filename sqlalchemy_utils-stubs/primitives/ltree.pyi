import re

from ..utils import str_coercible as str_coercible

path_matcher: re.Pattern[str]

@str_coercible
class Ltree:
    def __init__(self, path_or_ltree: str | Ltree) -> None: ...
    @classmethod
    def validate(cls, path: str) -> None: ...
    def index(self, other: str | Ltree) -> int: ...
    def descendant_of(self, other: str | Ltree) -> bool: ...
    def ancestor_of(self, other: str | Ltree) -> bool: ...
    def __getitem__(self, key: int | slice) -> Ltree: ...
    def lca(self, *others: list[str | Ltree]) -> Ltree | None: ...
    def __add__(self, other: str | Ltree) -> Ltree: ...
    def __radd__(self, other: str | Ltree) -> Ltree: ...
